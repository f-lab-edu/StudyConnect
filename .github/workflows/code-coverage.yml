name: Code Coverage
# 워크플로우 이름을 설정합니다. 여기서는 'Code Coverage'로 설정했습니다.

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
# 워크플로우 트리거를 설정합니다. 'main' 브랜치에 푸시되거나 풀 리퀘스트가 생성될 때마다 실행됩니다.

jobs:
  coverage:
    runs-on: ubuntu-latest
    # 작업이 실행될 운영 체제를 설정합니다. 여기서는 최신 우분투 버전을 사용합니다.

    steps:
      - uses: actions/checkout@v3
      # 레포지토리의 소스 코드를 체크아웃하는 작업을 설정합니다.

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      # JDK 17을 설치하고 설정하는 작업을 설정합니다. 여기서는 Temurin 배포판을 사용합니다.

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # Gradle 의존성을 캐시하는 작업을 설정합니다. 이렇게 하면 빌드 시간이 단축됩니다.

      - name: Run tests with JaCoCo
        run: ./gradlew test jacocoTestReport
      # Gradle과 JaCoCo 플러그인을 사용하여 테스트를 실행하고 코드 커버리지 보고서를 생성합니다.

      - name: Upload code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: build/reports/jacoco/test/html
      # 생성된 코드 커버리지 보고서를 GitHub Actions 아티팩트로 업로드합니다.
